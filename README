README

MiniAda is a simple compiler for a subset of Ada written in Java using ANTLR,
targeting the JVM. This project is a work in progress, and currently only
provides a parser.

MiniAda is developed by two students at Radford University, bconniff
(github.com/bconniff) and jdominic (github.com/jdominic). All code is property
of Radford University.

REQUIREMENTS

Download ANTLR jar version 3 and place the jar in the main directory renaming 
it to antlrworks.jar.

Download Jasmin version 2.4 and place the jasmin.jar in the main directory.

Install ANT and JDK

COMPILATION

The source comes with an Ant build.xml file which will help build MiniAda for
you. You should look in the build file and set the path to your ANTLR jar file.

To build a MiniAda jar file (by default, "miniada.jar"), use the command:

   ant

After compilation, you can run MiniAda just like any jar, passing it a list
of input files:

   java -jar miniada.jar <file> ...

To output the assembly code to stdout use the command-line option "-Dasm=on" 

   java -Dasm=on -jar miniada.jar <file> ...

To delete all the files created by running "ant" (except the jar file), use the
command:

   ant clean

REQUIREMENTS

Building MiniAda requires a working (and sufficiently recent) JDK, as well as
ANTLR version 3, and Ant.

After building the MiniAda jar file (see COMPILATION), the only requirement
to run MiniAda is a working JDK.

DIFFERENCES FROM ADA

The language implemented by the MiniAda compiler is similar to Ada95, but not
identical. In the future, this section will list the specific differences.
